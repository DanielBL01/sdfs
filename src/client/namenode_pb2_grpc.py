# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import namenode_pb2 as namenode__pb2


class NameNodeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ClientWrite = channel.unary_unary(
                '/proto3.namenode.NameNode/ClientWrite',
                request_serializer=namenode__pb2.SourceFile.SerializeToString,
                response_deserializer=namenode__pb2.Response.FromString,
                )
        self.ClientReadFromNameNode = channel.unary_unary(
                '/proto3.namenode.NameNode/ClientReadFromNameNode',
                request_serializer=namenode__pb2.SystemFile.SerializeToString,
                response_deserializer=namenode__pb2.File.FromString,
                )


class NameNodeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ClientWrite(self, request, context):
        """

        Simple RPC where client sends a request to server using stub and waits for a response 
        A stub exists to call service defined in .proto


        Client writes to NameNode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientReadFromNameNode(self, request, context):
        """Client reads from NameNode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NameNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ClientWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.ClientWrite,
                    request_deserializer=namenode__pb2.SourceFile.FromString,
                    response_serializer=namenode__pb2.Response.SerializeToString,
            ),
            'ClientReadFromNameNode': grpc.unary_unary_rpc_method_handler(
                    servicer.ClientReadFromNameNode,
                    request_deserializer=namenode__pb2.SystemFile.FromString,
                    response_serializer=namenode__pb2.File.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto3.namenode.NameNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NameNode(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ClientWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto3.namenode.NameNode/ClientWrite',
            namenode__pb2.SourceFile.SerializeToString,
            namenode__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientReadFromNameNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto3.namenode.NameNode/ClientReadFromNameNode',
            namenode__pb2.SystemFile.SerializeToString,
            namenode__pb2.File.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
